{"version":3,"sources":["components/math.js","App.js","serviceWorker.js","index.js"],"names":["addStyles","MathConventor","useState","inputlatex","setInputlatex","className","type","onChange","event","target","value","id","onClick","domtoimage","toPng","document","getElementById","then","dataUrl","console","log","link","createElement","download","href","click","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"sOAIAA,sBAwCeC,MAtCf,WAA0B,IAAD,EACWC,mBAAS,gCADpB,mBAClBC,EADkB,KACNC,EADM,KAavB,OACE,6BACE,yBAAKC,UAAU,QACb,8BACEC,KAAK,OACLC,SAAU,SAACC,GACTJ,EAAcI,EAAMC,OAAOC,QAE7BA,MAAOP,IAET,yBAAKQ,GAAG,UACN,kBAAC,kBAAD,KAAkBR,IAGpB,6BAEF,2BACEG,KAAK,SACLI,MAAM,kBACNE,QA7BN,WACEC,IAAWC,MAAMC,SAASC,eAAe,WAAWC,MAAK,SAACC,GACxDC,QAAQC,IAAIF,GACZ,IAAIG,EAAON,SAASO,cAAc,KAClCD,EAAKE,SAAW,eAChBF,EAAKG,KAAON,EACZG,EAAKI,gBCAIC,MAVf,WACE,OACE,yBAAKrB,UAAU,OACb,0CACA,4EACA,kBAAC,EAAD,QCEcsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFnB,SAASC,eAAe,SDyHpB,kBAAmBmB,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,a","file":"static/js/main.1b5e7449.chunk.js","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport { addStyles, StaticMathField } from \"react-mathquill\";\nimport domtoimage from \"dom-to-image\";\n\naddStyles();\n\nfunction MathConventor() {\n  let [inputlatex, setInputlatex] = useState(\"\\\\frac{1}{\\\\sqrt{2}}\\\\cdot 2\");\n\n  function handleDownload() {\n    domtoimage.toPng(document.getElementById(\"output\")).then((dataUrl) => {\n      console.log(dataUrl);\n      var link = document.createElement(\"a\");\n      link.download = \"equation.png\";\n      link.href = dataUrl;\n      link.click();\n    });\n  }\n\n  return (\n    <div>\n      <div className=\"card\">\n        <textarea\n          type=\"Text\"\n          onChange={(event) => {\n            setInputlatex(event.target.value);\n          }}\n          value={inputlatex}\n        />\n        <div id=\"output\">\n          <StaticMathField>{inputlatex}</StaticMathField>\n        </div>\n\n        <p></p>\n      </div>\n      <input\n        type=\"button\"\n        value=\"Download as PNG\"\n        onClick={handleDownload}\n      ></input>\n    </div>\n  );\n}\n\nexport default MathConventor;\n","import React from \"react\";\n\nimport \"./App.css\";\nimport MathConventor from \"./components/math\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h2>Math Rocks</h2>\n      <p>Convent and download formatted math equation.</p>\n      <MathConventor></MathConventor>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}